function _onParseCommentRecent(item, atomClass) {
  return `
<li class="media">
    <div class="media-body">
      <h5 class="media-heading"><a href="${util.url(item.url, item.language, atomClass)}#comments">Re: ${util.escapeHtml(item.atomName)}</a></h5>
      <div class="body">${item.h_summary}</div>
      <div class="user">-- ${util.escapeHtml(item.h_userName)}</div>
    </div>
</li>
  `;
}

function _onParseTag(item) {
  return `
<li class="media">
  <div class="media-body">
    <div class="media-heading"><a href="${util.url('static/articles.html')}?tagId=${item.id}&tagName=${encodeURIComponent(item.tagName)}">${util.escapeHtml(item.tagName)}</a></div>
  </div>
  <div class="media-right"><span class="badge">${item.articleCount}</span></div>
</li>
  `;
}

function _onParseProfileAuthor(data) {
  const author = data.user;
  return `
  <div>
    <a class='avatar'>
      <img class="avatar avatar48" src="${util.combineImageUrl(author.avatar, 48, 48)}" title="${util.escapeHtml(author.userName)}"/>
    </a>
    <span class='name'><a>${util.escapeHtml(author.userName)}</a></span>
    <div class="motto">${util.escapeHtml(author.motto) || ''}</div>
  </div>
  `;
}

// sidebar
util.sidebar = {
  tags(options) {
    const $container = $(options.container);
    if ($container.length === 0) return;
    if (!options.onParse) options.onParse = _onParseTag;
    this._loadTags({ $container, onParse: options.onParse });
  },
  commentsRecent(options) {
    const $containers = $(options.container);
    if ($containers.length === 0) return;
    for (let i = 0; i < $containers.length; i++) {
      const $container = $($containers[i]);
      if (!options.onParse) options.onParse = _onParseCommentRecent;
      this._loadCommentsRecent({ $container, onParse: options.onParse });
    }
  },
  profileAuthor(options) {
    const $container = $(options.container);
    if ($container.length === 0) return;
    if (!options.onParse) options.onParse = _onParseProfileAuthor;
    this._loadProfileAuthor({ $container, onParse: options.onParse });
  },
  articlePost(options) {
    const $container = $(options.container);
    if ($container.length === 0) return;
    $('.button-article-post', $container).click(() => {
      const item = {
        module: env.site.atomClass.module,
        atomClassName: env.site.atomClass.atomClassName,
        atomClassIdParent: env.site.atomClass.atomClassIdParent,
        language: env.language.current,
      };
      const url = `${env.site.serverUrl}/#!/a/cms/article/post?item=${encodeURIComponent(JSON.stringify(item))}`;
      location.assign(url);
    });
  },
  _loadTags({ $container, onParse }) {
    // options
    const options = {
      where: { language: env.language.current },
      orders: [
        [ 'articleCount', 'desc' ],
      ],
    };
    // select
    util.performAction({
      method: 'post',
      url: '/a/cms/tag/list',
      body: {
        atomClass: env.site.atomClass,
        options,
      },
    }).then(data => {
      const $list = $('.list', $container);
      for (let i = 0; i < data.list.length; i++) {
        $list.append($(onParse(data.list[i])));
      }
    });
  },
  _loadCommentsRecent({ $container, onParse }) {
    let atomClass;
    if ($container.data('module')) {
      atomClass = {
        module: $container.data('module'),
        atomClassName: $container.data('atomclassname'),
        atomClassIdParent: parseInt($container.data('atomclassidparent') || 0),
      };
    } else {
      atomClass = env.site.atomClass;
    }
    // options
    const options = {
      orders: [
        [ 'h_updatedAt', 'desc' ],
      ],
      page: { index: 0, size: env.comment.recentNum },
    };
    // select
    util.performAction({
      method: 'post',
      url: '/a/cms/comment/all',
      body: {
        atomClass,
        options,
      },
    }).then(data => {
      const $list = $('.list', $container);
      for (let i = 0; i < data.list.length; i++) {
        $list.append($(onParse(data.list[i],atomClass)));
      }
    });
  },
  _loadProfileAuthor({ $container, onParse }) {
    // profile
    util.performAction({
      method: 'post',
      url: '/a/user/public/profile',
      body: {
        userId: env.article.userIdCreated,
      },
    }).then(data => {
      const $panelBody = $('.panel-body', $container);
      $panelBody.append($(onParse(data)));
    });
  },
};
