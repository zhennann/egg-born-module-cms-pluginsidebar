function _onParseCommentRecent(item) {
  return `
<li class="media">
    <div class="media-body">
      <h5 class="media-heading"><a href="${util.url(item.url, item.language)}#comments">Re: ${item.atomName}</a></h5>
      <div class="body">${item.h_summary}</div>
      <div class="user">-- ${item.h_userName}</div>
    </div>
</li>
  `;
}

function _onParseTag(item) {
  return `
<li class="media">
  <div class="media-body">
    <div class="media-heading"><a href="${util.url('static/articles.html')}?tagId=${item.id}&tagName=${item.tagName}">${item.tagName}</a></div>
  </div>
  <div class="media-right"><span class="badge">${item.articleCount}</span></div>
</li>
  `;
}

function _onParseProfileAuthor(data) {
  const author = data.user;
  return `
  <div>
    <a class='avatar'>
      <img class="avatar avatar48" src="${util.combineImageUrl(author.avatar, 48, 48)}" title="${author.userName}"/>
    </a>
    <span class='name'><a>${author.userName}</a></span>
    <div class="motto">${author.motto}</div>
  </div>
  `;
}

// sidebar
util.sidebar = {
  tags(options) {
    const $container = $(options.container);
    if ($container.length === 0) return;
    if (!options.onParse) options.onParse = _onParseTag;
    this._loadTags({ $container, onParse: options.onParse });
  },
  commentsRecent(options) {
    const $container = $(options.container);
    if ($container.length === 0) return;
    if (!options.onParse) options.onParse = _onParseCommentRecent;
    this._loadCommentsRecent({ $container, onParse: options.onParse });
  },
  profileAuthor(options) {
    const $container = $(options.container);
    if ($container.length === 0) return;
    if (!options.onParse) options.onParse = _onParseProfileAuthor;
    this._loadProfileAuthor({ $container, onParse: options.onParse });
  },
  _loadTags({ $container, onParse }) {
    // options
    const options = {
      where: { language: env.language.current },
      orders: [
        [ 'articleCount', 'desc' ],
      ],
    };
    // select
    util.performAction({
      method: 'post',
      url: '/a/cms/tag/list',
      body: {
        atomClass: env.site.atomClass,
        options,
      },
    }).then(data => {
      const $list = $('.list', $container);
      for (let i = 0; i < data.list.length; i++) {
        $list.append($(onParse(data.list[i])));
      }
    });
  },
  _loadCommentsRecent({ $container, onParse }) {
    // options
    const options = {
      orders: [
        [ 'h_updatedAt', 'desc' ],
      ],
      page: { index: 0, size: env.comment.recentNum },
    };
    // select
    util.performAction({
      method: 'post',
      url: '/a/cms/comment/all',
      body: {
        atomClass: env.site.atomClass,
        options,
      },
    }).then(data => {
      const $list = $('.list', $container);
      for (let i = 0; i < data.list.length; i++) {
        $list.append($(onParse(data.list[i])));
      }
    });
  },
  _loadProfileAuthor({ $container, onParse }) {
    // profile
    util.performAction({
      method: 'post',
      url: '/a/user/public/profile',
      body: {
        userId: env.article.userIdCreated,
      },
    }).then(data => {
      const $panelBody = $('.panel-body', $container);
      $panelBody.append($(onParse(data)));
    });
  },
};
